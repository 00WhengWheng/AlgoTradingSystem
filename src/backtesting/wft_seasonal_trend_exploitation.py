def wft_seasonal_trends(data, date_col, price_col, seasonality_periods, train_years, test_years):
    """
    Walk-Forward Test for Seasonal Trend Exploitation.
    
    Parameters:
        data (pd.DataFrame): DataFrame containing price data with timestamps.
        date_col (str): Column representing dates.
        price_col (str): Column representing asset prices.
        seasonality_periods (list): List of periods to check seasonality (e.g., ['Q4', 'Q1']).
        train_years (int): Number of years in the in-sample (training) data.
        test_years (int): Number of years in the out-of-sample (testing) data.
    
    Returns:
        pd.DataFrame: Out-of-sample performance metrics for each iteration.
    """
    data[date_col] = pd.to_datetime(data[date_col])
    data['year'] = data[date_col].dt.year
    data['quarter'] = data[date_col].dt.quarter
    
    results = []
    start_year = data['year'].min()
    end_year = data['year'].max()
    
    while start_year + train_years + test_years <= end_year:
        # Define in-sample and out-of-sample years
        train_data = data[(data['year'] >= start_year) & (data['year'] < start_year + train_years)]
        test_data = data[(data['year'] >= start_year + train_years) & 
                         (data['year'] < start_year + train_years + test_years)]
        
        # Analyze seasonal trends
        seasonal_returns = {}
        for period in seasonality_periods:
            if period.startswith('Q'):
                quarter = int(period[1])
                seasonal_data = train_data[train_data['quarter'] == quarter]
                seasonal_returns[period] = seasonal_data[price_col].pct_change().mean()
        
        # Apply seasonal trends in out-of-sample
        test_data['expected_return'] = 0
        for period, return_avg in seasonal_returns.items():
            if period.startswith('Q'):
                quarter = int(period[1])
                test_data.loc[test_data['quarter'] == quarter, 'expected_return'] = return_avg
        
        # Calculate actual returns
        test_data['actual_return'] = test_data[price_col].pct_change()
        
        # Log results
        results.append({
            'start_year': start_year + train_years,
            'end_year': start_year + train_years + test_years - 1,
            'expected_return': test_data['expected_return'].sum(),
            'actual_return': test_data['actual_return'].sum()
        })
        
        # Move window forward
        start_year += test_years
    
    return pd.DataFrame(results)
